# -*- coding: utf-8 -*-
"""GCP-app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bxfu_HPK54A1I2MFtM630NVLaHZKC5G-
"""

from flask import Flask, request, jsonify
import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer, AutoModelForCausalLM, AutoTokenizer
from rouge_score import rouge_scorer
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction

app = Flask(__name__)

# Charger les modèles GPT-2 et GPT-Neo
GPT2_MODEL = GPT2LMHeadModel.from_pretrained("gpt2")
GPT2_TOKENIZER = GPT2Tokenizer.from_pretrained("gpt2")
GPT_NEO_MODEL = AutoModelForCausalLM.from_pretrained("EleutherAI/gpt-neo-1.3B")
GPT_NEO_TOKENIZER = AutoTokenizer.from_pretrained("EleutherAI/gpt-neo-1.3B")

# Générer un poème
def generate_poem(prompt, model, tokenizer, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors="pt")
    outputs = model.generate(inputs, max_length=1000, num_return_sequences=1, no_repeat_ngram_size=2, temperature=1.0)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Calculer les scores ROUGE
def calculate_rouge_scores(reference, hypothesis):
    scorer = rouge_scorer.RougeScorer(["rouge1", "rouge2", "rougeL"], use_stemmer=True)
    scores = scorer.score(reference, hypothesis)
    return scores

# Calculer le score BLEU
def calculate_bleu_score(reference, hypothesis):
    reference_tokens = reference.split()
    hypothesis_tokens = hypothesis.split()
    smoothing = SmoothingFunction().method4
    bleu_score = sentence_bleu([reference_tokens], hypothesis_tokens, smoothing_function=smoothing)
    return bleu_score

@app.route('/')
def home():
    return "API de génération de poèmes avec IA en cours d'exécution !"

@app.route('/generate', methods=['POST'])
def generate():
    data = request.json
    prompt = data.get('prompt', '')

    poem_gpt2 = generate_poem(prompt, GPT2_MODEL, GPT2_TOKENIZER)
    poem_gpt_neo = generate_poem(prompt, GPT_NEO_MODEL, GPT_NEO_TOKENIZER)

    rouge_scores = calculate_rouge_scores(poem_gpt2, poem_gpt_neo)
    bleu_score = calculate_bleu_score(poem_gpt2, poem_gpt_neo)

    return jsonify({
        "poem_gpt2": poem_gpt2,
        "poem_gpt_neo": poem_gpt_neo,
        "rouge_scores": {
            "rouge1": rouge_scores["rouge1"].fmeasure,
            "rouge2": rouge_scores["rouge2"].fmeasure,
            "rougeL": rouge_scores["rougeL"].fmeasure
        },
        "bleu_score": bleu_score
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8501)